#!/usr/bin/env python3
from ISPProgrammer import LPC80x, LPC84x
import click

INSTALLED_FAMILIES = (
    LPC80x, 
    LPC84x,
)
BAUDRATES = (
    9600,
    19200,
    38400,
    57600,
    115200,
    230400,
    460800
)
BAUD = BAUDRATES[3]# breaks with 115200

CHIPS = []
for family in INSTALLED_FAMILIES:
    CHIPS.extend(family.Family)

@click.group()
def gr1():
    pass


def SetupChip(chipname):
    chip = None
    for ChipFamily in INSTALLED_FAMILIES:
        if chipname in ChipFamily.Family:
            chip = ChipFamily("/dev/ttyUSB0", baudrate = BAUD) 
    
    if(chip is None):
        raise UserWarning("Chip %s unknown"%chipname)

    chip.InitConnection()
    print("Initiated %s"%chipname)
    chip.ChangeBaudRate(BAUD)

    return chip

def DataReadWriteCheck(chip):
    WriteData = bytes((0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7))
    chip.WriteToRam(chip.RAMRange[0], WriteData)
    resp = chip.ReadMemory(chip.RAMRange[0], len(WriteData))
    DataRead = bytes(resp[0], encoding = "utf-8")
    if(WriteData != DataRead):
        raise UserWarning("RAM Write/Read Check Failed")

@click.option('--chipname', '-c', type = click.Choice(CHIPS), required = True, help='Chip Type')
@gr1.command()
def QueryChip(chipname):
    chip = SetupChip(chipname)

@click.option('--chipname', '-c', type = click.Choice(CHIPS), required = True, help='Chip Type')
@gr1.command()
def MassErase(chipname):
    chip = SetupChip(chipname)
    chip.MassErase()
    print("Mass Erase Successful")

@click.option('--chipname', '-c', type = click.Choice(CHIPS), required = True, help='Chip Type')
@click.option('--imagein', type = str, required = True, help='Location of hex file to program')
@gr1.command()
def WriteImage(chipname, imagein):
    baudrate = 115200
    chip = SetupChip(chipname)
    #DataReadWriteCheck(chip)
    #print("Set baudrate to %d"%baudrate)
    #chip.SetBaudRate(115200)
    chip.WriteImage(imagein)

if __name__ == "__main__":
    gr1()
